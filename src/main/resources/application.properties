spring.application.name=everestFitness


#Server Port
server.port =${SERVER_PORT}

# Database Configuration
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Jpa Hibernate Configuration
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Spring Security
#spring.security.enabled=false
#
# SMTP MAIL Configuration
spring.mail.host=smtp.gmail.com
spring.mail.username=${EMAIL_USERNAME}
spring.mail.password=${EMAIL_PASSWORD}
spring.mail.port=${SMTP_PORT}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com


# Enabling MultiPart uploads
#spring.servlet.multipart.enabled=true
#spring.servlet.multipart.max-file-size=10MB
#spring.servlet.multipart.max-request-size=10MB
#
# Message/ Health
#server.error.include-message=always
#
# Handling Hibernate Proxies and Preventing Serialization Errors
#spring.jackson.serialization.fail-on-empty-beans=false
#
# Configure Amazon S3 bucket
#cloud.aws.credentials.accessKey=${AWS_ACCESS_KEY_ID}
#cloud.aws.credentials.secretKey=${AWS_SECRET_ACCESS_KEY}
#cloud.aws.region.static=${AWS_REGION}
#s3.bucket.name=${S3_BUCKET_NAME}
#
# For debugging
#logging.level.org.springframework.security=DEBUG
#
# Allow all origins
#spring.web.cors.allow-credentials=true
#spring.web.cors.allowed-origins=*
#spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS

#spring.security.user.name=Deepak
#spring.security.user.password=1234


# Path to the OpenAPI JSON endpoint
springdoc.api-docs.path=/v3/api-docs

# Path to the Swagger UI
springdoc.swagger-ui.path=/swagger-ui.html

# Optional: Set the title and description of the API documentation
springdoc.api-docs.title=Everest Fitness API
springdoc.api-docs.description=This is a sample API documentation.



#Cloudinary Cloud Configuration
cloudinary.cloud_name=${CLOUDINARY_CLOUD_NAME}
cloudinary.api_key=${CLOUDINARY_API_KEY}
cloudinary.api_secret=${CLOUDINARY_API_SECRET}
cloudinary.folder_name=${CLOUDINARY_FOLDER_NAME}


#OAuth2 Configuration
#spring.security.oauth2.client.registration.google.client-id=your-google-client-id
#spring.security.oauth2.client.registration.google.client-secret=your-google-client-secret
#spring.security.oauth2.client.registration.google.scope=openid,profile,email
#spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google
#spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
#spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
#spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
#spring.security.oauth2.client.provider.google.user-name-attribute=sub

server.error.whitelabel.enabled=false
server.error.path=/error



jwt.secret=${JWT_SECRET_KEY}